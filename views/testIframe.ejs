<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title></title>
        <link rel="stylesheet" type="text/css" href="/css/iFrameStyle.css">
    </head>
    <body>
              <%
              let allOutputData = [""];
              let currentReturnIndex = 0;
              let currentDepth = 0;
              let maxDepth = 0;
              let currentIteration = 0;
              %>

              <%
              let standInString = `function standIn(`;
              for(let i = 0; i < tomeDataKey.parameters.length; i++) {
                standInString += tomeDataKey.parameters[i];
                if(i+1<tomeDataKey.parameters.length) {
                  standInString += ", ";
                };
              };
              standInString += `) {
                ${tomeDataKey.jsText}}`;
              %>
              <%eval(standInString)%>

              <%
              let recFunctionString = `function ${tomeDataKey.fName}(`;
              for(let i = 0; i < tomeDataKey.parameters.length; i++) {
                recFunctionString += tomeDataKey.parameters[i];
                if(i+1<tomeDataKey.parameters.length) {
                  recFunctionString += ", ";
                };
              };
              recFunctionString += `) {
                currentReturnIndex++;
                allOutputData.push("");
                let thisFunctionsIndex = currentReturnIndex;
                let thisFunctionsOutputObject = {};
                currentDepth++;
                if(currentDepth > maxDepth) {
                  maxDepth = currentDepth;
                }
                thisFunctionsOutputObject.depth = currentDepth;
                currentIteration++;
                thisFunctionsOutputObject.fnCallNum = currentIteration;
                `;
                for(let i = 0; i < tomeDataKey.parameters.length; i++) {
                  recFunctionString += `thisFunctionsOutputObject.param${i}Data = ${tomeDataKey.parameters[i]};
                  `;
                }
                recFunctionString += `let data = standIn(`;
                for(let i = 0; i < tomeDataKey.parameters.length; i++) {
                  recFunctionString += tomeDataKey.parameters[i];
                  if(i+1<tomeDataKey.parameters.length){
                    recFunctionString += ", ";
                  }
                }
                recFunctionString += `);
                thisFunctionsOutputObject.returnedData = data;
                allOutputData[thisFunctionsIndex] = thisFunctionsOutputObject;
                currentDepth--;
                return data;
              };`;
              %>

              <%eval(recFunctionString)%>

              <%
              let initialOutputObject = {};
              initialOutputObject.depth = 0;
              initialOutputObject.fnCallNum = 0;
              let callFunctionString = `initialOutputObject.returnedData = standIn(`;
              for(let i = 0; i < argumentsInKey.length; i++) {
                callFunctionString += `${argumentsInKey[i]}`;
                if(i+1<argumentsInKey.length){
                  callFunctionString += ", ";
                }
                initialOutputObject[`param${i}Data`] = argumentsInKey[i];
              }
              callFunctionString += `);`;
              %>
              <%eval(callFunctionString)%>
              <%allOutputData[0] = initialOutputObject; %>
              <%
              allOutputData.sort(function(a,b) {
                if((a.depth - b.depth) === 0) {
                  return(a.fnCallNum - b.fnCallNum);
                } else {
                  return(a.depth - b.depth);
                }
              });
              %>

              <div class="flexColumn">
                <div class="flexRow">
              <%
              let currentDivDepth = 0;
              for(let i = 0; i < allOutputData.length; i++) {
                if(allOutputData[i].depth > currentDivDepth) {
                  currentDivDepth = allOutputData[i].depth; %>
                  </div><div class="flexRow">
                <%}%>
                <container class="dataContainer">
                  <h5> Function call #: <%=allOutputData[i].fnCallNum+1%> </h5>
                  <% let j = 0;
                  while(allOutputData[i][`param${j}Data`]) { %>
                    <h5> <%=tomeDataKey.parameters[j]%>: <%=allOutputData[i][`param${j}Data`]%> </h5>
                    <%
                    j++;
                  }%>

                  <h5> Return Value: <%=allOutputData[i].returnedData%> </h5>

                </container>
              <%}%>
              </div>
    </body>
</html>
